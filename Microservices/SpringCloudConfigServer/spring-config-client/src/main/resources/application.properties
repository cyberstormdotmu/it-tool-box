
spring.application.name=config-client

#if we want to lookup property files in the config server by another name, instead of per spring.application.name.
#we would actually set this property here, and spring.application.name in the properties repo file
spring.cloud.config.name=config-client

#----- tomará el profile especificado, ya sea en local o del servidor de configuración
#tomará del fichero {spring.application.name}-{spring.profiles.active}.[yml|properties] en el repositorio git
spring.profiles.active=development


#podemos setearla como system property o como env variable

#- spring.config.import=optional:configserver:$${SPRING_CLOUD_CONFIG_URI:http://spring-config-server-leo:8888}   (ok)
#----- ENV VARS WILL OVERRIDE application.[yml|properties] PROPERTIES
#----- TO POINT FROM CONTAINER TO HOST MACHINE
#spring.config.import=optional:configserver:http://host.docker.internal:8888   (ok)
#spring.config.import=optional:configserver:http://docker.for.mac.localhost:8888   (ok)
#----- TO POINT INSIDE THE COINTAINERS' SHARED NETWORK
#spring.config.import=optional:configserver:http://spring-config-server-leo:8888   (ok)
#spring.config.import=optional:configserver:http://spring-config-server:8888   (ok)
#----- The URL directly, works on SB 2.4.0 and SCloud < 2020.0.0-M5   (NO on SB 2.5.0 and SCloud 2020.0.2)
#spring.config.import=http://host.docker.internal:8888
#spring.config.import=http://docker.for.mac.localhost:8888
#spring.config.import=http://spring-config-server-leo:8888
#spring.config.import=http://spring-config-server:8888

    #${CONFIG_SERVER_URI:${vcap.services.${PREFIX:}configserver.credentials.uri:http://user:password@localhost:8888}}


#----- to enable refresh through /actuator/refresh endpoint
#since Spring Boot 2.0, the Actuator endpoints are not exposed by default. By default, you can still access them over JMX if you do not set this flag.
management.endpoints.web.exposure.include=*
#SI REFRESCO EL SERVIDOR CON UNA SIMPLE CONSULTA A
#http://localhost:8888/config-client/development/master
#SE PIERDEN CAMBIOS EN EL REPO LOCAL!!!
#el servidor guarda una copia del repo y al refrescar con esa url se trae el repo nuevamente.
#Tenemos que hacer commit y PUSH de los cambios en la configuración!
#Si el repo está configurado como file:/ también aplica, no pq se traiga los cambios del remoto, sino que guardará una copia, ya que funcionaba incluso si mi repo era private y sin credenciales configuradas!


#----- this username and psw are needed cause server is protected with basic authentication
spring.cloud.config.username=root
spring.cloud.config.password=s3cr3t
