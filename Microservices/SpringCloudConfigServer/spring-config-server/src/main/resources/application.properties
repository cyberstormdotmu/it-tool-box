
spring.application.name=config-server

server.port=8888

#spring security basic authentication
spring.security.user.name=root
spring.security.user.password=s3cr3t

#Tip:
#If you are planning to use multiple config server instances pointing to the same config repository, you can configure the server to clone your repo into a local temporary folder.
#But be aware of private repositories with two-factor authentication, they are difficult to handle! In such a case, it is easier to clone them on your local filesystem and work with the copy.
#Can be used with protocols like http, ssh or a simple file on a local filesystem.

#spring.cloud.config.server.git.uri=
#mínimo para arrancar, pero no sé si busca properties de algún sitio!
spring.cloud.config.server.git.uri=https://github.com/lsarot/spring-cloud-config-server
#MUST BE A PUBLIC REPO OR private but configured with credentials
#file:/Users/Leo/Documents/Software Projects/IDEs/EclipseProjects/Microservices/SpringCloudConfigServer/spring-cloud-config-server
#paths like ${HOME}/Desktop/config also works
#spring.cloud.config.server.git.uri=https://github.com/lsarot/spring-cloud-config-server
#spring.cloud.config.server.git.uri=ssh://localhost/config-repo
#spring.cloud.config.server.git.clone-on-start=true

#spring.cloud.config.server.git.basedir: target/config


#-------------------- PROPERTIES ENCRYPTION


#The Config Server can use a symmetric (shared) key or an asymmetric one (RSA key pair). The asymmetric choice is superior in terms of security, but it is often more convenient to use a symmetric key since it is a single property value to configure

#PUEDO USAR ESTO COMO PSW PARA ENCRIPTACIÓN SIMÉTRICA (ig. AES) CON EL ENDPOINT /encrypt   (CONFIGURAR ENV VAR COMO ENCRYPT_KEY)
#encrypt.key=my-k34-s3cr3t

#O UNA keystore.jks (ASIMÉTRICA -> RSA) QUE CREAMOS CON:
#keytool -genkeypair -alias config-server-key -keyalg RSA -keysize 4096 -sigalg SHA512withRSA -dname 'CN=Web Server,OU=Unit,O=Organization,L=City,S=State,C=US' -keypass my-k34-s3cr3t -keystore config-server.jks -storepass my-k34-s3cr3t
#note: with JDK11+ storepass and keypass must be the same!

#Y CONFIGURAMOS EN .properties
encrypt.keyStore.location=classpath:/config-server.jks
encrypt.keyStore.password=${KEYSTORE_PASSWORD:my-k34-s3cr3t}
    # don't use a default in production
encrypt.keyStore.alias=config-server-key
encrypt.keyStore.secret=my-k34-s3cr3t
encrypt.keyStore.type=jks
#encrypt.failOnError=false


#CÓMO ENCRYPTAR UNA PROPERTY CON NUESTRA KEYSTORE ?:
#export PASSWORD=$(curl -X POST --data-urlencode d3v3L http://root:s3cr3t@localhost:8888/encrypt)
#echo "user.password={cipher}$PASSWORD" >> config-client-development.properties
#git commit -am 'Added encrypted password'
#curl -X POST http://root:s3cr3t@localhost:8888/refresh

#Explanation:
#The config server is per default enabled to encrypt property values in a symmetric or asymmetric way.
#To use symmetric cryptography, you simply have to set the property ‘encrypt.key' in your application.properties to a secret of your choice. Alternatively you can pass-in the environment variable ENCRYPT_KEY.
#For asymmetric cryptography, you can set ‘encrypt.key' to a PEM-encoded string value or configure a keystore to use.
#Because we need a highly secured environment for our demo server, we chose the latter option and generating a new keystore, including a RSA key-pair, with the Java keytool first:


#PARA DESHABILITAR DECRIPTACIÓN POR PARTE DEL SERVIDOR Y HACERLO POR NUESTRO MEDIO:
#spring.cloud.config.server.encrypt.enabled=false
