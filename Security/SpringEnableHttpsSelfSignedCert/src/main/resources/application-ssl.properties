http.port=8080

server.port=8443

#así está configurado y usa TLSv1.2  128 bits  ECDHE-RSA-AES128-GCM-SHA256 (lo vimos usando: openssl s_client -connect localhost:8443)

security.require-ssl=true

# The format used for the keystore
server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
server.ssl.key-store=classpath:keystore/mykeystore.p12
# The password used to generate the certificate
server.ssl.key-store-password=password
# The alias mapped to the certificate
server.ssl.key-alias=httpsdemo


#enable/disable https
#server.ssl.enabled=true
#ssl ciphers   (esto se vió en un ejemplo para conectar una app Android al servidor)
#server.ssl.ciphers=TLS_RSA_WITH_AES_128_CBC_SHA256, INCLUDE_ANY_OTHER_ONES_YOU_NEED_TO_SUPPORT
# SSL protocol to use.
server.ssl.protocol=TLS
# Enabled SSL protocols.
server.ssl.enabled-protocols=TLSv1.2





### CUANDO HAGO UN REQUEST DESDE UN NAVEGADOR (visito una página), EL NAVEGADOR ME PREGUNTARÁ SI DESEO CONTINUAR EN CASO DE QUE MI CERTIFICADO SEA AUTOFIRMADO (no confiable).
### pero si hago un request desde una app cliente (pero no un browser), debo configurar un trust store parece (esto se usó para el Live Test que está en este proyecto)
### pero NO CREO que se deba colocar password en el cliente, es inseguro.
	##puede ver la clave publica y privada y desencriptar mensajes
#trust store location
trust.store=classpath:keystore/mykeystore.p12
#trust store password
trust.store.password=password
