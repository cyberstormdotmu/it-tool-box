version: "3.7"

#define the list of services (or containers) we want to run as part of our application
services:
    #First, let's define the service entry and the image for the container.
    #We can pick any name for the service. The name will automatically become a network alias, which will be useful when defining our MySQL service.
    #so the service-name is app
    app:
        image: node:12-alpine
        command: sh -c "yarn install && yarn run dev"
        ports:
            - 3000:3000
        working_dir: /app
        #for volumes, we can use relative paths from the current directory.
        volumes:
            - ./:/app
        environment:
            MYSQL_HOST: mysql
            MYSQL_USER: root
            MYSQL_PASSWORD: secret
            MYSQL_DB: todos

    mysql:
        #remember the image in this case points to one existing Repository:Tag (try: docker image ls)
        image: mysql:5.7
        volumes:
            - todo-mysql-data:/var/lib/mysql
        environment: 
            MYSQL_ROOT_PASSWORD: secret
            MYSQL_DATABASE: todos


#To create a volume to be used
#We need to define the volume in the top-level volumes: section and then specify the mountpoint in the service config. By simply providing only the volume name, the default options are used.
volumes:
    todo-mysql-data:


#By default, Docker Compose automatically creates a network specifically for the application stack (which is why we didn't define one in this file).